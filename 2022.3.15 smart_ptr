指针是源自 C 语言的概念，本质上是一个内存地址索引，代表了一小片内存区域（也可能
会很大），能够直接读写内存。


因为它完全映射了计算机硬件，所以操作效率高，是 C/C++ 高效的根源。当然，这也是引
起无数麻烦的根源。访问无效数据、指针越界，或者内存分配后没有及时释放，就会导致运
行错误、内存泄漏、资源丢失等一系列严重的问题

我们可以应用代理模式，把裸指针包装起来，在构造函数里初始化，在析构函数里释放。这
样当对象失效销毁时，C++ 就会自动调用析构函数，完成内存释放、资源回收等清理工
作。
和 Java、Go 相比，这算是一种“微型”的垃圾回收机制，而且回收的时机完全“自主可
控”，非常灵活。当然也有一点代价——你必须要针对每一个资源手写包装代码，又累又
麻烦。
智能指针就是代替你来干这些“脏活累活”的。它完全实践了 RAII，包装了裸指针，而且
因为重载了 * 和 -> 操作符，用起来和原始指针一模一样。

常用的有两种智能指针，分别是 unique_ptr 和 shared_ptr

unique_ptr 虽然名字叫指针，用起来也很像，但它实际上并不是指针，
而是一个对象。所以，不要企图对它调用 delete，它会自动管理初始化时的指针，在离开
作用域时析构释放内存。
另外，它也没有定义加减运算，不能随意移动指针地址，这就完全避免了指针越界等危险操
作
除了调用 delete、加减运算，初学智能指针还有一个容易犯的错误是把它当成普通对象来
用，不初始化，而是声明后直接使用

未初始化的 unique_ptr 表示空指针，这样就相当于直接操作了空指针，运行时就会产生致
命的错误（比如 core dump）。

unique_ptr 的所有权
正如它的名字，表示指针的所有权是“唯一”的，不允许共享，任何时候只能有一
个“人”持有它

为了实现这个目的，unique_ptr 应用了 C++ 的“转移”（move）语义，同时禁止了拷贝
赋值，所以，在向另一个 unique_ptr 赋值的时候，要特别留意，必须用 std::move() 函
数显式地声明所有权转移。

赋值操作之后，指针的所有权就被转走了，原来的 unique_ptr 变成了空指针，新的
unique_ptr 接替了管理权，保证所有权的唯一性：

认识 shared_ptr

hared_ptr 的名字明显表示了它与 unique_ptr 的最大不同点：它的所有权是可以被安
全共享的，也就是说支持拷贝赋值，允许被多个“人”同时持有，就像原始指针一样

shared_ptr 支持安全共享的秘密在于内部使用了“引用计数”。
引用计数最开始的时候是 1，表示只有一个持有者。如果发生拷贝赋值——也就是共享的
时候，引用计数就增加，而发生析构销毁的时候，引用计数就减少。只有当引用计数减少到
0，也就是说，没有任何人使用这个指针的时候，它才会真正调用 delete 释放内存。

code 
#include <cassert>

#include <iostream>
#include <memory>
#include <string>

template<class T, class... Args>
std::unique_ptr<T>
my_make_unique(Args&&... args)
{
    return std::unique_ptr<T>(
            new T(std::forward<Args>(args)...));
}

void case1()
{
    using namespace std;

    unique_ptr<int> ptr1(new int(10));
    assert(*ptr1 == 10);
    assert(ptr1 != nullptr);

    unique_ptr<string> ptr2(new string("hello"));
    assert(*ptr2 == "hello");
    assert(ptr2->size() == 5);

    //ptr1++;
    //ptr2 += 2;

    //unique_ptr<int> ptr3;
    //*ptr3 = 42;

    auto ptr3 = make_unique<int>(42);
    assert(ptr3 && *ptr3 == 42);

    auto ptr4 = make_unique<string>("god of war");
    assert(!ptr4->empty());

    auto ptr5 = my_make_unique<long>(100L);
    assert(*ptr5 == 100);
}

void case2()
{
    using namespace std;

    auto ptr1 = make_unique<int>(42);
    assert(ptr1 && *ptr1 == 42);

    auto ptr2 = std::move(ptr1);		
    assert(!ptr1 && ptr2);
}

void case3()
{
    using namespace std;

    shared_ptr<int> ptr1(new int(10));
    assert(*ptr1 = 10);

    shared_ptr<string> ptr2(new string("hello"));
    assert(*ptr2 == "hello");

    auto ptr3 = make_shared<int>(42);
    assert(ptr3 && *ptr3 == 42);

    auto ptr4 = make_shared<string>("zelda");
    assert(!ptr4->empty());
}

void case4()
{
    using namespace std;

    auto ptr1 = make_shared<int>(42);
    assert(ptr1 && ptr1.unique() );

    auto ptr2 = ptr1;
    assert(ptr1 && ptr2);

    assert(ptr1 == ptr2);
    assert(!ptr1.unique() && ptr1.use_count() == 2);
    assert(!ptr2.unique() && ptr2.use_count() == 2);
}

class DemoShared final
{
public:
    DemoShared() = default;
   ~DemoShared()
   {
       // do some blocking thing ...
   }
};

class Node final
{
public:
    using this_type     = Node;
    //using shared_type   = std::shared_ptr<this_type>;
    using shared_type   = std::weak_ptr<this_type>;
public:
    shared_type     next;
public:
    Node() = default;
   ~Node()
    {
       using namespace std;
       cout << "node dtor" << endl;
    }
};

void case5()
{
    using namespace std;

    auto n1 = make_shared<Node>();
    auto n2 = make_shared<Node>();

    assert(n1.use_count() == 1);
    assert(n2.use_count() == 1);

    n1->next = n2;
    n2->next = n1;

    assert(n1.use_count() == 1);
    assert(n2.use_count() == 1);

    if (!n1->next.expired()) {
        auto ptr = n1->next.lock();
        assert(ptr == n2);
    }

    //assert(n1.use_count() == 2);
    //assert(n2.use_count() == 2);
}

int main()
{
    using namespace std;

    case1();
    case2();
    case3();
    case4();
    case5();

    cout << "smart_ptr demo" << endl;
}
